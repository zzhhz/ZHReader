package com.zzh.reader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzh.reader.model.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "books".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "books";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, Long.class, "bookId", true, "bookId");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "bookName");
        public final static Property BookPath = new Property(2, String.class, "bookPath", false, "bookPath");
        public final static Property BookCover = new Property(3, String.class, "bookCover", false, "bookCover");
        public final static Property IsCatalogue = new Property(4, boolean.class, "isCatalogue", false, "isCatalogue");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"books\" (" + //
                "\"bookId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: bookId
                "\"bookName\" TEXT," + // 1: bookName
                "\"bookPath\" TEXT," + // 2: bookPath
                "\"bookCover\" TEXT," + // 3: bookCover
                "\"isCatalogue\" INTEGER NOT NULL );"); // 4: isCatalogue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"books\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(1, bookId);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPath = entity.getBookPath();
        if (bookPath != null) {
            stmt.bindString(3, bookPath);
        }
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(4, bookCover);
        }
        stmt.bindLong(5, entity.getIsCatalogue() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindLong(1, bookId);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookPath = entity.getBookPath();
        if (bookPath != null) {
            stmt.bindString(3, bookPath);
        }
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(4, bookCover);
        }
        stmt.bindLong(5, entity.getIsCatalogue() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bookId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookCover
            cursor.getShort(offset + 4) != 0 // isCatalogue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookCover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsCatalogue(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setBookId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getBookId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
